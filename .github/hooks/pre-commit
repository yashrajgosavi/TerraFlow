#!/bin/bash

# Navigate to the repository root
repo_root=$(git rev-parse --show-toplevel)
cd "$repo_root" || exit 1

# Directories containing Terraform files
terraform_dirs=("aws" "azure" "kubernetes")

# Track failures
failed_fmt=()
failed_validate=()

# Iterate over each Terraform directory
for dir in "${terraform_dirs[@]}"; do
    if [[ -d "$dir" ]]; then
        echo "Checking Terraform formatting in $dir..."

        # Find .tf files and run fmt -check
        tf_files=($(find "$dir" -maxdepth 1 -type f -name "*.tf"))
        if [[ ${#tf_files[@]} -ne 0 ]]; then
            for file in "${tf_files[@]}"; do
                if ! terraform fmt -check "$file"; then
                    failed_fmt+=("$file")
                fi
            done
        fi

        echo "Initializing Terraform in $dir..."
        terraform -chdir="$dir" init -backend=false > /dev/null 2>&1

        echo "Validating Terraform configuration in $dir..."
        if ! terraform -chdir="$dir" validate > /tmp/tf_validate_error.log 2>&1; then
            failed_validate+=("$dir")
            echo "Validation errors in $dir:"
            cat /tmp/tf_validate_error.log
        fi
    fi
done

# Report formatting issues
if [[ ${#failed_fmt[@]} -ne 0 ]]; then
    echo "Terraform formatting check failed in the following files:"
    for file in "${failed_fmt[@]}"; do
        echo " - $file"
    done
    echo "Run 'terraform fmt' to fix formatting."
    exit 1
fi

# Report validation issues
if [[ ${#failed_validate[@]} -ne 0 ]]; then
    echo "Terraform validation failed in the following directories:"
    for dir in "${failed_validate[@]}"; do
        echo " - $dir"
    done
    exit 1
fi

exit 0
